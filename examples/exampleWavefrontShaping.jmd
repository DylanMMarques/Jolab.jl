---
title : Wavefront shaping by a Multi Mode Fibre
options:
---
This example shows how to use the VOS toolbox to simulate a wavefront shaping experiment. In this example, we will consider a multi mode fibre and a monochromatic light beam will be focused on the tip of the fibre. The aim is to change the wavefront of the incident beam in order to form a focused spot on the other side of the multi mode fibre.
The first step is to load the necessary packages. To find the optimal wavefront that creates a focus spot we will use the optimization package [BlackBoxOptim](https://github.com/robertfeldt/BlackBoxOptim.jl).
```julia
using Jolab
using BlackBoxOptim
using Plots; plotly()
```

## Designing the optical setup
The optical setup is made by a Spatial Light Modulator (SLM), a lens and a multi mode fibre. The wavefront of a collimated beam is modulated by the SLM and then focused by a lens into the multi mode fibre. Light coupled inside the multi mode fibre propagates by the multi mode fibre. The aim is to find the optimal wavefront of the incident beam such that a focused beam is formed on the far end of the multi mode fibre.
We start by creating the SLM:
```julia
x_slm = range(-10E-3, 10E-3, length = 25); # x coordinates of the SLM phase mask pixels in meters
y_slm = range(-10E-3, 10E-3, length = 25); # y coordinates of the SLM phase mask pixels in meters
mask_slm = ones(ComplexF64, length(x_slm), length(y_slm)); # initial mask of the SLM. Each position of the matrix phase[iX, iY] is the modulation value for the SLM pixel at position x[iX], y[iY].
ref_slm = ReferenceFrame(0.,0,0); # x,y,z position of the SLM center in meters
slm = SpatialLightModulator(x_slm, y_slm, mask_slm, ref_slm); # Initialization of the SLM
```
We need now to define the incident field upon the SLM
```julia
λ = 1550E-9; # wavelength in meters of the field
nambient = Jolab.refractiveindex_air(printBool = false); # refrative index of the ambient medium
dir = 1; # direction of the field
ref_field = ReferenceFrame(0.,0,0); # Initial position of the field (coincident with the SLM)
x = range(-10E-3, 10E-3, length = 100); # x coordinates in meters where the field is evaluated
y = range(-10E-3, 10E-3, length = 100); # y coordinates in meters where the field is evaluated
field = FieldSpace_uniform(x, y, λ, nambient(λ), dir, ref_field); # Initialization of field with uniform intensity.
```

We will now define the lens used
```julia
f_lens = 50E-3; # Focal length in meters of the lens
na_lens = 1; # Numerical aperture of the lens
ref_lens = ReferenceFrame(0,0,f_lens); # x,y,z position of the lens. We define such that the SLM is on the back focal plane of the lens
lens = Lens(f_lens, na_lens, ref_lens); # Initialization of the lens
```

And, finally, the multi mode fibre
```julia
r_fib = 50E-6; # radius of the fibre core in meters
na_fib = .2; # numerical aperture of the fibre
ref_fib = ReferenceFrame(0,0,2 * f_lens); # x,y,z position of the first fibre tip in meter. We define it such that it is in the lens focal plane
length_fib= 1; # length of the fibre.
ncore_fib = Jolab.refractiveindex_fusedsilica(printBool = false); # refractive index of the fibre core
fibre = CircularStepIndexFibre(r_fib, na_fib, ncore_fib, nambient, ref_fib, nambient, length_fib); # Initialization of the fibre
```

## Defining the light propagation function
We finished the definition of all necessary components for the simulation. The next step is simulate the light propagation by the optical setup. Since we will need to evaluate the light propagation many times to find the optimal wavefront we will create the function lightpropagation of the optical setup considered. But first, we will calculate the modes of the fibre. This is important to call a prior this function since it will avoid repeting the modes calculation for every wavefront simulation.
```julia
findmodes!(fibre, λ);
```
We can now define the function lightpropagation. This function propagates the field by the optical setup and returns the field transmitted by the multi mode fibre.
```julia; results = "hidden"
function lightpropagation(field_l, slm_l, lens_l, fibre_l)
    (tmp, field_l) = lightinteraction(slm_l, field_l); # Calculate the change in the field wavefront by the SLM
    (tmp, angspe_l) = lightinteraction(lens_l, field_l); # Calculate the angular spectrum in the focal plane of the lens

    # To calculate the light coupling inside the fibre, the incident field must be a field in space
    fieldfocalplane_l = FieldSpace_fromangspefft(angspe_l, padding = 1024-100); # Transform the angular spectrum into the field in space. Be sure that the padding is good enough to have a good field sampling

    (tmp, fieldmodes_l) = lightinteraction(fibre_l, fieldfocalplane_l); # Calculate the field coupled into de fibre
    # x_l = range(-fibre_l.r, fibre_l.r, length = 100); # x coordinates in meters where the field will be evaluated
    # y_l = range(-fibre_l.r, fibre_l.r, length = 100); # y coordinates in meters where the field will be evaluated
    # fieldoutfibre_l = lightinteraction(fibre_l, fieldmodes_l, x_l, y_l); # Field at the tip of the fibre after propagating through the fibre
    return fieldfocalplane_l
end
```
## Defining the optimization
We now need to define a condition that the BlackBoxOptim package will try to minimize. In this case, we want to maximize the intensity at a given point.
```julia; results = "hidden"
function condition(field_l, slm_l, lens_l, fibre_l, mask_XY_l)
    vec(slm_l.t_XY) .= exp.(im .* vec(mask_XY_l)); # update the SLM mask
    field_l = lightpropagation(field_l, slm_l, lens_l, fibre_l); # returns the field after the multi mode fibre for a given SLM mask
    return -maximum(abs2(field_l.e_SXY[1,75,75])); # Return the optimizing condition. The optimization package will try to minimize this value
end
```
## Running the optimization algorithm
At this point we just need to run the optimization algorithm from the BlackBoxOptim package.
```julia; results = "hidden"
optimization(mask) = condition(field, slm, lens, fibre, mask); # defines the optimization function for the BlackBoxOptim package

result = bboptimize(optimization, SearchRange = (-π, float(π)), NumDimensions = length(mask_slm), MaxTime = 10); # Runs the optimization algorithm
```
After the optimization we can finally plot the desired result
```julia
best_mask = best_candidate(result); # Gets the best SLM mask

vec(slm.t_XY) .= exp.(im .* vec(best_mask)); # Updates the SLM with the best mask
best_field = lightpropagation(field, slm, lens, fibre); # Calculates the field after the fibre for the best SLM Mask
plot(best_field, fill = true) # Plots the optimized field
scatter!([best_field.x_X[75]], [best_field.y_Y[75]], fill = true) # Plots the point where the field is optimizing to
```
