---
title : The concept of modularity
options:
---
# Example: The concept of modularity
This is an example of using the VOS toolbox to simulate the propagation of light by an optical setup. We start by the simplest optical setup: a collimated beam focused which propagates by two lenses.

The first step is to load the VOS toolbox into Julia
```julia
using Jolab
using Plots; plotly()
```

## Defining the optical setup
We will now create the first lens which focus the collimated beam. A lens is defined based on its focal length (f), its numerical aperture (na) and its referential, i.e., the position in space where the lens is placed.
```julia
f1 = 30E-3 # focal length in meters of the lens
na1 = 1 # Numerical aperture of the lens
ref1 = ReferenceFrame(0, 0, f1) # Position in meters of the lens in meters (x,y,z)
lens1 = Lens(f1, na1, ref1); # Creation of the lens
```
The next step is to create the second lens which will re-collimate the beam. As before, we define its focal length, na and referential. We place the lens such that the focal plane of both lenses is the same.
```julia
f2 = 60E-3 # focal length in meters of the lens
na2 = 1 # Numerical aperture of the lens
ref2 = ReferenceFrame(0, 0, 2f1 + f2) # Position in meters of the lens
lens2 = Lens(f2, na2, ref2); # Creation of the lens
```
We also need to specify the collimated beam incident upon the lens. In this example, we will consider a Gaussian beam in the back focal plane of the lens. A Gaussian beam is defined based on the beam waist (σ), wavelength (λ) and referential:
```julia
λ = 1550E-9 # wavelength in meters
σ = 1000E-6 # Gaussian beam waist in meters. Defined based on where the intensity decreases to 1/e²
x = σ .* range(-1.5, 1.5, length = 128); # Position x in meters where the field is evaluated
y = σ .* range(-1.5, 1.5, length = 128); # Position y in meters where the field is evaluated
n = Jolab.refractiveindex_air(printBool= false); # Refractive index of the medium
dir = 1; # Direction of propagation of the field (forward 1 or backward -1)
ref = ReferenceFrame(0 , 0, 0); # Position in mirrors of the field (x,y,z)
fieldBackFocalPlane = FieldSpace_gaussian(x, y, σ, λ, n(λ), dir, ref); # Creation of the field
plot(fieldBackFocalPlane) # Display the field intensity
```
## Propagating the field by the optical setup

At this point, all the optical components of the simulations are setup. The next step is to calculate the lens effect on the incident beam:
```julia
angspeFocalPlane = lightinteraction(lens1, fieldBackFocalPlane); # Calculates the field in the focal plane of the lens
```
A Lens class takes a field defined in space and transforms it into a field defined as an angular spectrum, i.e. as a sum of plane waves with given amplitude, phase and direction of propagation (see [exampleAngularSpectrum](exampleAngularSpectrum.jld)).
To calculate the field in space we can use the function angspetospace to transform an angular spectrum into the respective field in space.
```julia
xFocalPlane = range(-50E-6, 50E-6, length = 128);
yFocalPlane = range(-50E-6, 50E-6, length = 128);
fieldFocalPlane = FieldSpace_fromangspe(angspeFocalPlane, xFocalPlane, yFocalPlane);
plot(fieldFocalPlane)
```

We have calculated the field in the focal plane. We can now propagate the field by the second lens. We need to repeat the same approach as before:
```julia
fieldBackFocalPlane_2 = lightinteraction(lens2, angspeFocalPlane);
plot(fieldBackFocalPlane_2)
```
We have finally calculated how light propagates by two lenses. We can see that the beam is magnified as it propagates by the two lens due to the different focal length.
This example shows the basic concept of the toolbox - the modularity. This toolbox is built to allow its users to calculate how light interacts with single optical components and, by putting code together, how light propagates on optical setups. This simple example only simulates lens but any lens could be replace by any other optical component such as, fibre, mirror, interferomenters, etc...
